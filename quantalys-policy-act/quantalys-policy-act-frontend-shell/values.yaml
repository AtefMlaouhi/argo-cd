image:
  registry: registry-git.harvest.fr/quantalys/cicd/argocd-dotnet
  repository: quantalys.policy.act.shell
  pullPolicy: IfNotPresent

imagePullSecrets:
  - name: gitlab
nameOverride: ""
fullnameOverride: "policy-act-frontend-shell"

podAnnotations:
  env: unspecified
  version: unspecified
  proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }' # Ensure proxy is started before starting the app container

config: {}

nginx_config: |
  events{}
  http {
      include /etc/nginx/mime.types;
      server {
        listen 80;

        absolute_redirect off;
        add_header Cache-Control 'no-cache, max-age=0, must-revalidate, proxy-revalidate';
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";

        location / {
          root /usr/share/nginx/html;
          index index.html index.htm;
          try_files $uri $uri/ /index.html =404;
        }

        location /index.html {
          root /usr/share/nginx/html;
          index index.html index.htm;
        }
      }
  }

shell_config: |
  var ActsShellConfig = {
      baseUrl: 'https://{{ .Values.hosts | first }}', // baseUrl utilisée pour charger les assets dans les templates
      keycloakConfig: {
          url: 'https://{{ .Values.config.keycloak.url }}/auth',
          logoutRedirectUrl: 'https://{{ .Values.hosts | first }}', // peut être différente de l'application elle-même
          realm: '{{ .Values.config.keycloak.realm }}',
          clientId: '{{ .Values.config.keycloak.client_id }}',
          loginOptions: {
              idpHint: '',
          },
      },
      microfrontends: [
        {{- range $micro_frontend := .Values.config.micro_frontends }}
        '{{ $micro_frontend.name }}',
        {{- end }}
      ],
      urls: {
          remotes: {
              {{- range $micro_frontend := .Values.config.micro_frontends }}
              {{ $micro_frontend.name }}: 'https://{{ $micro_frontend.host }}/remoteEntry.js',
              {{- end }}
          },
          configs: {
              {{- range $micro_frontend := .Values.config.micro_frontends }}
              {{ $micro_frontend.name }}: 'https://{{ $micro_frontend.host }}/assets/config/config.js',
              {{- end }}
          },
          fonts: {
              {{- range $micro_frontend := .Values.config.micro_frontends }}
              {{ $micro_frontend.name }}: 'https://{{ $micro_frontend.host }}/assets/basalte/fonts.css',
              {{- end }}
          },
      },
      remotesConfigName: {
          shift: 'ActsMfeShiftConfig',
          topup: 'ActsMfeTopupConfig',
      },
      version: '{{ .Values.image.tag }}'
    };

    // pour Angular
    if (typeof window !== 'undefined') {
        window.ActsShellConfig = ActsShellConfig;

        // chargement des configs des microfrontends consommés
        var configs = ActsShellConfig.urls.configs;
        Object.keys(configs).forEach(function (key) {
            var script = document.createElement('script');
            script.src = configs[key];
            document.head.appendChild(script);
        });

        var fonts = ActsShellConfig.urls.fonts;
        Object.keys(fonts).forEach(function (key) {
            var link = document.createElement('link');
            link.rel = 'stylesheet';
            link.type = 'text/css';
            link.href = fonts[key];
            link.media = 'all';
            document.head.appendChild(link);
        });
    }

    // pour Webpack
    if (typeof exports !== 'undefined') {
        exports.ActsShellConfig = ActsShellConfig;
    }

service:
  type: ClusterIP
  port: 80

probes: {}

serviceAccount:
  create: true
  annotations: {}
  name: ""

resources:
  requests:
    cpu: 50m
    memory: 256Mi
  limits:
    memory: 256Mi

replicaCount: 1

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}