kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ include "quantalys.document.library.frontend.fullname" . }}-config
data:
  nginx.conf: |
    {{- tpl .Values.nginx_config . | nindent 4 }}

  config.js: |
    var MfeDocumentsConfig = {
      baseUrl: 'https://{{ .Values.hosts | first }}',
      keycloakConfig: {
          url: 'https://{{ .Values.config.keycloak.url }}/auth',
          logoutRedirectUrl: 'https://{{ .Values.hosts | first }}', // peut être différente de l'application elle-même
          realm: '{{ .Values.config.keycloak.realm }}',
          clientId: '{{ .Values.config.keycloak.client_id }}',
          loginOptions: {
              idpHint: '',
          },
      },
      urls: {
          remotes: {
            example: 'https://{{ .Values.hosts | first }}/remoteEntry.js',
          },
          configs: {},
          fonts: {
            example: 'https://{{ .Values.hosts | first }}/assets/basalte/fonts.css',
          },
          apis: {
            backend: 'https://{{ .Values.config.backend.url }}',
            legacy: 'https://{{ .Values.config.legacy.url }}'
          },
      },
      remotesConfigName: {
        example: 'MfeDocumentsConfig',
      },
      version: '1.0.0'
    };

    // pour Angular
    if (typeof window !== 'undefined') {
      window.MfeDocumentsConfig = MfeDocumentsConfig;

      // chargement des configs des microfrontends consommés
      var configs = MfeDocumentsConfig.urls.configs;
      Object.keys(configs).forEach(function (key) {
          var script = document.createElement('script');
          script.src = configs[key];
          document.head.appendChild(script);
      });

      var fonts = MfeDocumentsConfig.urls.fonts;
      Object.keys(fonts).forEach(function (key) {
          var link = document.createElement('link');
          link.rel = 'stylesheet';
          link.type = 'text/css';
          link.href = fonts[key];
          link.media = 'all';
          document.head.appendChild(link);
      });
     }

    // pour Webpack
    if (typeof exports !== 'undefined') {
      exports.MfeDocumentsConfig = MfeDocumentsConfig;
    }
